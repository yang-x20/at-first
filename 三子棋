//三子棋
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#define ROW 3
#define COL 3
 
void menu();
void game();
void Initboard(char board[ROW][COL],int row,int col);
void Displayboard(char board[ROW][COL],int row,int col);
void PlayerMove(char board[ROW][COL],int row,int col);
void ComputerMove(char board[ROW][COL],int row,int col) ;
char ISWIN(char board[ROW][COL],int row,int col);
int ISFULL(char board[ROW][COL],int row,int col);

void test()
{
	int input = 0;
	srand((unsigned int)time(NULL));
	do
	{
		menu();
		printf("请选择->");
		scanf("%d",&input);
		switch(input)
		{
			case 1:
				game();
				break;
			case 0:
				printf("退出游戏\n");
				break;
			default:
				printf("选择错误，请重新选择\n");
				break;
		}
	}while(input);
}

int main()
{
	test();
	return 0;
} 

//打印菜单 
void menu()
{
	printf("#######################################\n");
	printf("#####   1. play     0. exit     #######\n");
	printf("#######################################\n");
}

//游戏的整个算法实现 
void game() 
{
	char ret = 0;
	 //数组--存放棋盘的信息 
	 char board[ROW][COL] = { 0 };
	 //对棋盘进行初始化
	 Initboard(board, ROW, COL);
	 //打印棋盘
	 Displayboard(board, ROW, COL);
	 //下棋
	 while(1)
	 {
		//玩家下棋
		PlayerMove(board,ROW,COL);
		Displayboard(board, ROW, COL);
		//判断输赢
		ret = ISWIN(board, ROW, COL); 
		if(ret!='C')
			break;
		//电脑下棋
		ComputerMove(board,ROW,COL);
		Displayboard(board, ROW, COL);
		//判断输赢
		ret = ISWIN(board, ROW, COL);	
		if(ret!='C')
			break;
  	 } 
  	 if(ret=='*')
  	 	printf("玩家赢\n");
 	 else if(ret=='#')
 	 	printf("电脑赢\n");
	 else
	    printf("平局\n"); 
}
//初始化棋盘
void Initboard(char board[ROW][COL],int row,int col)
{
	int i = 0;
	int j = 0;
	for(i=0;i<row;i++)
	{
		for(j=0;j<col;j++)
		{
			board[i][j] = ' ';
		}
	}
} 

//打印棋盘
void Displayboard(char board[ROW][COL],int row,int col)
{
	int i = 0;
	for(i=0;i<row;i++)
	{
		int j = 0;
		for(j=0;j<col;j++)
		{
			//打印一行的数据 
			printf(" %c ",board[i][j]);
			if(j<col-1)
				printf("|");
		}
		printf("\n");
		//打印分隔行
		if(i<row-1)
		{
			for(j=0;j<col;j++)
			{
				printf("---");
				if(j<col-1)
					printf("|");
			}
			printf("\n");
		} 
	}
} 

//玩家下棋
void PlayerMove(char board[ROW][COL],int row,int col)
{
	int x = 0;
	int y = 0;
	printf("玩家走\n");
	while(1)
	{
		printf("输入要走的坐标->");
		scanf("%d%d",&x,&y);
		if(x>=1&&x<=ROW&&y>=1&&y<=COL)
		{
			if(board[x-1][y-1]==' ')
			{
				board[x-1][y-1] = '*';
				break;
			}
			else
				printf("该坐标被占用,请重新输入\n"); 
		}
		else
			printf("输入的坐标非法，请重新输入\n");
		} 
} 
//电脑下棋
void ComputerMove(char board[ROW][COL],int row,int col) 
{
	int x = 0;
	int y = 0;
	printf("电脑走\n");
	while(1)
	{
		x = rand() % ROW;
		y = rand() % COL;
		if(board[x][y]==' ')
		{
			board[x][y] = '#';
			break;
		}
	}
}
//判断棋盘是否满了
//返回1表示棋盘满了
//返回0表示棋盘没满
int ISFULL(char board[ROW][COL],int row,int col)
{
	int i = 0;
	int j = 0;
	for(i=0;i<row;i++)
	{
		for(j=0;j<col;j++)
		{
			if(board[i][j]==' ')
				return 0;
		}
	}
	return 1;
} 
//判断输赢
char ISWIN(char board[ROW][COL],int row,int col)
{
	int i = 0;
	int j = 0;
	//横着赢了 
	for(i=0;i<row;i++)
	{
		j = 0;
		while(j<col-1)
		{
			if(board[i][j]==board[i][j+1] && board[i][j]!=' ')
				j++;
			else 
				break;
		}
		if(j==col-1)
			return board[i][j];
	}
	//竖着赢了
	 for(i=0;i<col;i++)
	{
		j = 0;
		while(j<row-1)
		{
			if(board[j][i]==board[j+1][i] && board[j][i]!=' ')
				j++;
			else 
				break;
		}
		if(j==row-1)
			return board[j][i];
	}
	//左上到右下斜着赢了 
	if(board[0][0]!=' ')
	{
		i = 0;
		j = 0;
		while(i<row-1)
		{
			if(board[i][j]==board[i+1][j+1])
			{
				i++;
				j++;
			}
			else
				break;
		}
		if(i==row-1)
			return board[0][0];
	}
	//右上到左下斜着赢了
 	if(board[0][col-1]!=' ')
	{
		j = row - 1;
		i = 0;
		while(i<row-1)
		{
			if(board[i][j]==board[i+1][j-1])
			{
				i++;
				j--;
			}
			else
				break;
		}
		if(i==row-1)
			return board[0][col-1];
	}
	//判断是否平局
	if(1==ISFULL(board,ROW,COL))
	{
		return 'Q';
	} 
	return 'C';
} 

